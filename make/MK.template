# this is a Makefile template, users can write a makefile
# define some VALUE, and include this Makefile template
#
# here is two user Makefile example

############################################################

#  ################################################
#  # Simple Makefile for AAA project
#  PROG_VERSION = 3.4.5
#
#  APP_TARGET = myexename
#  # CXX_PCH = allpch.h    # precompile head file for C++ file
#  SRCS = main.cpp ../subsys/bb.cpp
#
#  # ok, we have defined the value, include template
#  TOP_DIR=../
#  include $(TOP_DIR)/Makefile.template

############################################################


############################################################

#  ################################################
#  # Complex Makefile for AAA project
#  include PROG_VERSION.def
#  # or set directly : PROG_VERSION = 3.4.5
#
#  CC = /opt/tools/gcc4/bin/gcc
#  CXX = /opt/tools/gcc4/bin/g++
#
#  APP_TARGET = myexename
#  # or LIB_TARGET = mylibname
#  # or DSO_TARGET = mydsoname
#  C_PCH = allpch_c.h    # precompile head file for c file
#  CXX_PCH = allpch_cxx.h    # precompile head file for C++ file
#  CFLAGS = -I../SFC_III/include
#  LDFLAGS = -L../SFC_III/lib -lsfc
#  SRCS = main.cpp aa.c ../subsys/bb.cpp dd.c
#  # or SRCS = $(wildcard *.c) $(wildcard *.cpp)
#
#
#  # ok, we have defined the value, include template
#  TOP_DIR=../
#  include (TOP_DIR)/Makefile.template
#

############################################################


# value explain 
# (opt) define os type (don't use OSTYPE, env use it)
# OS_TYPE : os type, FREEBSD, or WIN32, default is LINUX
#
# (opt) define build type, DEBUG or RELEASE, or user define it, default is DEBUG
# BUILD_TYPE : built type -- DEBUG / RELEASE / FULLDEBUG / FULLRELEASE / CUSTOM
#
# (opt) define program version
# PROG_VERSION : program version, if not exist, we use date as version
#
# (opt) if you want to use another version of gcc, define this
#       and if you build c program, you must define CXX to gcc for linking
# CC = /opt/tools/gcc4/bin/gcc     
# CXX = /opt/tools/gcc4/bin/g++
#
#
# (opt) sub dir or sub makefile target
# SUB_DIRS_TARGET : set sub dirs, we will go throught these dirs
# SUB_MAKEFILES_TARGET : set sub makefile, we will go throught these makefiles
# 
# (must) you can only define one of them
# APP_TARGET : target name of the application
# LIB_TARGET : target name of the static library, libxxxx.a
# DSO_TARGET : target name of the dynamic library, libxxxx.so
# 
# (must) define source to generate the target
# SRCS : source files that need compile for target
#
# (opt) if you want to you precompile header, define this
# C_PCH : gcc precompile head file for c file
# CXX_PCH : gcc precompile head file for c++ file
#
# (opt) if you need your own compile flags and link flags, defile this
# CFLAGS : user defined compile flags, include path and MACRO, etc..
# LDFLAGS : user defined link flags, library path and library name, etc..
#
#
# (must) top dir, use to reference TOP dir, use relative path is ok
# TOP_DIR : ../



############################################################
####	Makefile Template ---- BEGIN
############################################################

############################################################
####	<1> some basic VALUE define

# TOP_DIR : define by user
# SRCS : define by user

# user must have defined $SRCS
# OBJS=$(addsuffix .o,$(basename $(SOURCES)))

OBJS    := $(foreach src, $(SRCS), $(basename $(src)).o )

DEPS    := $(foreach src, $(SRCS), $(dir $(src)).dep.$(notdir $(basename $(src)) ).d )


############################################################
####	<2> compiler and flag

PROG_VERSION ?= $(shell date +%Y%m%d)-snapshot
OS_TYPE ?= LINUX
BUILD_TYPE ?= DEBUG
BUILD_MODE ?=

SCONF_ENABLE_PCH ?= yes

# let user define it, it not defined, default is g++ and cc, cc is an link to gcc
CXX 	?= g++
CC		?= gcc
NASM	?= nasm
AR		?= ar
LD		?= ld
STRIP	?= strip
ARFLAG	?= crv

LIB_STR ?= lib
PLATFORM ?= i386

#CFLAGS += -pipe -D_REENTRANT -Wall -Werror -D$(OS_TYPE) -DPROG_VERSION=\"$(strip $(PROG_VERSION))\"
CFLAGS += -pipe -D_REENTRANT -Wall -D$(OS_TYPE) -DPROG_VERSION=\"$(strip $(PROG_VERSION))\"

# 64 bit file offset support
CFLAGS += -D_FILE_OFFSET_BITS=64


# build type, debug or release
# default is debug

ifeq ($(strip $(BUILD_TYPE)),FULLDEBUG)
CFLAGS += -g -DDEBUG -DFULLDEBUG
endif

ifeq ($(strip $(BUILD_TYPE)),DEBUG)
CFLAGS += -g -DDEBUG
endif

ifeq ($(strip $(BUILD_TYPE)),RELEASE)
CFLAGS += -O2 -g -DRELEASE
endif

ifeq ($(strip $(BUILD_TYPE)),FULLRELEASE)
# -ffast-math 
# /* -funit-at-a-time */
# -fprefetch-loop-arrays
# -fforce-addr (-fforce-mem is implied by -O3)
# -falign-functions=4
# -funroll-loops ( bigger exe, maybe faster, usually not worth it, I don't use it)
CFLAGS += -O3 -DNDEBUG -DRELEASE -DFULLRELEASE -fomit-frame-pointer
endif


ifneq ($(strip $(DSO_TARGET)),)
CFLAGS += -DPIC -fPIC
endif


#default 64 bit mode, using m32 to change 32 bit mode
ifeq ($(strip $(shell uname -i)),x86_64)
PLATFORM = x86_64
ifeq ($(strip $(BUILD_MODE)),32)
LIB_STR = lib
CFLAGS += -m32
else
LIB_STR = lib64
CFLAGS += -m64
endif

endif

#default 32 bit mode, using m64 to change 64 bit mode
ifeq ($(strip $(shell uname -i)),ppc64)
PLATFORM = ppc64
ifeq ($(strip $(BUILD_MODE)),32)
LIB_STR = lib
CFLAGS += -m32
else
LIB_STR = lib64
CFLAGS += -m64
endif

endif

ifeq ($(strip $(shell uname -i)),ppc)
PLATFORM = ppc
LIB_STR = lib
endif

ifeq ($(strip $(shell uname -i)),i386)
PLATFORM = i386
LIB_STR = lib
endif

ifeq ($(strip $(shell uname -r | sed 's/\([0-9]\).\(.*\)/\1/')), 3)
CFLAGS += -DKERNEL_VERSION3
endif

ifeq ($(strip $(shell gcc --version | head -n 1 | sed 's/\([^0-9]*\) \([0-9]\).\(.*\)/\2/')), 4)
CFLAGS += -DGCC_VERSION4
endif

ifndef PRINTVV
Q      = @
ECHO   = printf "\t$(1)\t%s\n" $(2)
BRIEF  = CC AS CXX NASM AR LD STRIP
MSG    = $@
M      = @$(call ECHO,$(TAG),$@);
ARFLAG = cr
$(foreach VAR,$(BRIEF), \
    $(eval $(VAR) = @$$(call ECHO,$(VAR),$$(MSG)); $($(VAR))))
endif

############################################################
####	<3> compiler rules

#### 	<3-1> top TARGET rules

.PHONY : all clean $(SUB_DIRS_TARGET) $(SUB_MKS_TARGET)

all : $(APP_TARGET) $(LIB_TARGET) $(DSO_TARGET) $(SUB_DIRS_TARGET) $(SUB_MKS_TARGET)


####	<3-2> precompile header rule

ifeq ($(strip $(SCONF_ENABLE_PCH)),yes)

ifdef C_PCH
CFLAGS += -include $(C_PCH)
COBJ_GCH := $(C_PCH).gch
COBJ_DEP := $(dir $(C_PCH)).dep.$(notdir $(C_PCH)).d
DEPS += $(COBJ_DEP)

$(OBJS) $(APP_OBJS) $(LIB_OBJS) $(DSO_OBJS) : $(COBJ_GCH)

$(COBJ_GCH) : $(C_PCH)
	rm -f $(COBJ_GCH)
	$(CC) $(CFLAGS) -x c-header -MMD -MT $(COBJ_GCH) -MF $(COBJ_DEP) $(C_PCH)

endif

ifdef CXX_PCH
CFLAGS += -include $(CXX_PCH)
CXXOBJ_GCH := $(CXX_PCH).gch
CXXOBJ_DEP := $(dir $(CXX_PCH)).dep.$(notdir $(CXX_PCH)).d
DEPS += $(CXXOBJ_DEP)

$(OBJS) $(APP_OBJS) $(LIB_OBJS) $(DSO_OBJS) : $(CXXOBJ_GCH)

$(CXXOBJ_GCH) : $(CXX_PCH)
	rm -f $(CXXOBJ_GCH)
	$(CXX) $(CFLAGS) -x c++-header -MMD -MT $(CXXOBJ_GCH) -MF $(CXXOBJ_DEP) $(CXX_PCH)
	
endif

endif # SCONF_ENABLE_PCH

####	<3-3> default file compile rules

.SUFFIXES: .cpp .c .s 

%.o : %.cpp
	$(CXX) $(CFLAGS) -MMD -MF $(dir $*).dep.$(notdir $*).d -c -o $@ $<

%.o : %.cc
	$(CXX) $(CFLAGS) -MMD -MF $(dir $*).dep.$(notdir $*).d -c -o $@ $<

%.o : %.c
	$(CC) $(CFLAGS) -MMD -MF $(dir $*).dep.$(notdir $*).d -c -o $@ $<

%.o : %.s
	$(NASM) -f elf -o $@ $<


####	<3-4> default target compile rules

ifdef APP_TARGET
# -- TYPE -- <1> build execute program
$(APP_TARGET) : $(OBJS) 
	$(CXX) $(CFLAGS) -o $(APP_TARGET) $(OBJS) $(LDFLAGS)
endif

ifdef LIB_TARGET
# -- TYPE -- <2> build static lib xxx.a
$(LIB_TARGET) : $(OBJS)
	$(AR) $(ARFLAG) $(LIB_TARGET) $(OBJS) 
endif

ifdef DSO_TARGET
# -- TYPE -- <3> build share lib xxx.so
$(DSO_TARGET) : $(OBJS)
	$(CXX) -shared $(CFLAGS) -rdynamic -o $(DSO_TARGET) $(OBJS) $(LDFLAGS)
ifdef DEST
	@echo -e "\tCOPY\t"$@"\t"$(DEST)
	@cp $@ $(DEST) -rf
endif
endif

####	<3-5> sub dir and makefile target
$(SUB_DIRS_TARGET) :
	$(MAKE) -C $@

$(SUB_MKS_TARGET) :
	$(MAKE) -f $@


####	<3-6> clean

clean :
	@rm -f $(APP_TARGET) $(LIB_TARGET) $(DSO_TARGET) $(OBJS)
	@rm -f $(DEPS) $(COBJ_GCH) $(CXXOBJ_GCH)
	@echo "clean [TARGETS] [OBJS] [DEPS] ok."
	@for sub_dir in $(SUB_DIRS_TARGET) ; do \
		$(MAKE) -C $${sub_dir} clean ; \
	done
	@for sub_mk in $(SUB_MKS_TARGET) ; do \
		$(MAKE) -f $${sub_mk} clean ; \
	done



############################################################
####	<4> header file dependence 

ifneq ($(strip $(DEPS)),)
-include $(DEPS)
endif
